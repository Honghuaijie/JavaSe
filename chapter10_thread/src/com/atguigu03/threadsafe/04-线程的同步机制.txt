
线程的安全问题与线程的同步机制

1. 多线程卖票，出现的问题：出现了重票和错票

2. 什么原因导致的？线程1操作ticket的过程中，在尚未结束的情况下，其他线程也参与进来，对ticket进行操作。

3. 如何解决？必须保证一个线程a在操作ticket的过程中，其他线程必须等待，
    直到线程a操作ticket结束以后，其他线程才可以进来继续操作

4. Java是如何解决线程的安全问题的？使用线程的同步机制

方式1：同步代码块
synchronized(同步监视器){
 //需要被同步的代码
}

说明：
需要被同步的代码：即为操作同享数据的代码。
>共享数据：即多个线程都需要操作的数据。比如ticket.
> 需要被同步的代码，在被synchronized包裹以后，
    就使得一个线程在操作这些代码的过程中，其他线程必须等待。
>同步监视器：俗称锁。哪个线程获取了锁，哪个线程就能执行需要被同步的代码。
同步监视器，可以使用如何一个类的对象充当。但是，多个线程必须公用同一个同步监视器


注意：在实现Runnable接口的方式中，同步监视器的锁可以考虑使用this。
    在继承Thread类的方式中，同步监视器的锁要慎用this

方式2：同步方法

说明：
>如果操作共享数据的代码完整的声明在了一个方法中，那么我们就可以 将此方法声明为同步方法即可。
>非静态的同步方法，默认同步监视器是this。
  静态的同步方法，默认同步监视器是当前类本身。(类.class)


5. synchronized好处：解决了线程的安全问题

   弊端：在操作共享数据时，多线程其实是串行执行的，意味着性能低一些



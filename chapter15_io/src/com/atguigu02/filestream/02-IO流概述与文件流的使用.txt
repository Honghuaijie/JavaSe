
1. IO流的分类
> 流向的不同：输入流、输出流
> 处理单位的不同：字节流、字符流
> 流的角色的不同：节点流、处理流

2. 基础IO流的框架：
抽象基类            4个节点流(文件流)
InputStream       FileInputStream
OutputStream      FileOutputStream
Reader            FileReader
Writer            FileWriter

说明：本章虽然涉及到的流很多，但是使用流进行数据的读写操作是非常规范的

3. FileReader \ FileWriter 的使用
3.1 执行步骤：
1.创建读取或者写出的file类对象
2.创建输入流或输出流
3.具体读入或写出的过程
    读入：read(char[] cbuffer)
    写出：writer(String str)/ writer(char[] cbuffer, int off, int len)
4.关闭流资源，避免内存泄漏



3.2 注意点：
① 因为涉及到流资源关闭的操作， 出现异常时，需要使用try-catch方式处理异常
② 对于输入流来讲，要求File类对象对应的物理磁盘上的文件必须存在，否则会报FileNotFoundException
   对于输出流来讲，File类的对象对应的物理磁盘上的文件可以不存在，
        > 如果此文件不存在，那么在输出的过程中，会自动创建此文件，并写出数据到此文件中
        > 如果此文件存在，使用FileWriter（file） 或者 FileWriter（file，false），
                                输出数据过程中会新建同名的文件，对现有的文件进行覆盖
        > 如果此文件存在，使用FileWriter（file，true），输出数据过程中会自动在文件尾部追加写出内容。



4. FileInputStream \ FileOutputStream 的使用
4.1 执行步骤：
1、创建相关的File类对象
2、创建字节流对象
3、具体的读入和写出的过程
    读入：read(byte[] buffer)
    写出：writer(byte[] buffer,int off, int len)
4、关闭流资源


4.2 注意点：
① 因为涉及到流资源关闭的操作， 出现异常时，需要使用try-catch方式处理异常
② 对于输入流来讲，要求File类对象对应的物理磁盘上的文件必须存在，否则会报FileNotFoundException
   对于输出流来讲，File类的对象对应的物理磁盘上的文件可以不存在，
        > 如果此文件不存在，那么在输出的过程中，会自动创建此文件，并写出数据到此文件中
        > 如果此文件存在，使用FileOutputStream（file） 或者 FileOutputStream（file，false），
                                输出数据过程中会新建同名的文件，对现有的文件进行覆盖
        > 如果此文件存在，使用FileOutputStream（file，true），输出数据过程中会自动在文件尾部追加写出内容。

> 对于字符流，只能操作文本文件，尤其不能操作非文本文件
  对于字节流：通常是用来处理非文本文件。但是，如果涉及到文本文件的复制操作，也可以使用字节流

说明：
文本文件： .txt 、java、.c   .cpp  .py 等
非文本文件：.doc 、 .xls、.jpg   .mp3  .mp4  .avi  等



1. Map及其实现类对比
java.util.Map:存储一对一对的数据（key-value键值对）
    |--实现类：
        |--HashMap（主要实现类）:线程不安全的，效率高；可以添加null的key和value值；底层使用数组+单向链表+红黑树存储（jdk8)
           |-- LinkedHashMap:是HashMap的子类；在HashMap使用的数据结构的基础上，增加了一对双向链表，用于记录添加的元素的先后顺序
                            进而在遍历元素时，就可以按照添加的顺序显示。
                            开发中，对于频繁的遍历操作，建议使用此类
        |-- TreeMap：底层使用红黑树存储；可以按照添加的key-value中的key元素的指定的属性的大小顺序进行遍历。需要考虑使用①自然排序②定制排序
        |-- Hashtable:古老实现类；线程安全的，效率低；不可以添加null的key或value值;底层使用数组+单向链表存储（jdk8)
            |__ Properties：其key和value都是string类型。常用来处理属性文件


[面试题] 区别HapMap和Hashtable； 区分HapMap和LinkedHashMap； HashMap的底层实现（①new HashMap()  ②put(key,value)）


2. HashMap中元素的特点
> HashMap中的所有的key彼此之间是不可重复的、无序的，所有的key就构成一个Set集合。  --> Key所在的类要重写equals和HashCode方法
> HashMap中的所有value彼此之间是可重复的、无序的。所有的value就构成一个Collection集合。 -->value所在的类要重写equals方法
> HashMap中的一个key-value，就构成了一个Entry。
> HashMap中的所有的Entry彼此之间是不可重复的、无序的。所有的Entry就构成了一个Set集合。


3. Map中的常用方法
- 添加、修改操作：**
  - Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中
  - void putAll(Map m):将m中的所有key-value对存放到当前map中
- 删除操作：
  - Object remove(Object key)：移除指定key的key-value对，并返回value
  - void clear()：清空当前map中的所有数据
- 元素查询的操作：**
  - Object get(Object key)：获取指定key对应的value
  - boolean containsKey(Object key)：是否包含指定的key
  - boolean containsValue(Object value)：是否包含指定的value
  - int size()：返回map中key-value对的个数
  - boolean isEmpty()：判断当前map是否为空
  - boolean equals(Object obj)：判断当前map和参数对象obj是否相等
- 元视图操作的方法：**
  - Set keySet()：返回所有key构成的Set集合
  - Collection values()：返回所有value构成的Collection集合
  - Set entrySet()：返回所有key-value对构成的Set集合


小结：
    增
        put
        putAll

    删
        remove
        clear
    改
        put
        putAll
    查
        get()
        containsKey
        containsValue
        isEmpty()



    长度
        size()

    转换：
        keySet()
        values()
        entrySet()



4. TreeMap的使用
> 底层使用红黑树存储
> 可以按照添加的key-value中的key元素的指定的属性的大小顺序进行遍历。
> 需要考虑使用①自然排序②定制排序
> 要求:想treemap添加的key必须是同一个类型的对象。


5. Hashtable与Properties的使用
Properties:是Hashtable的子类，其key和value都是String类型，常用来处理属性文件





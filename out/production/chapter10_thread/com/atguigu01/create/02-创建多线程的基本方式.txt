
1. 线程的创建方式一：继承Thread类
1.1 步骤：
① 创建一个继承与Thread类的子类
② 重写Thread类的run方法  --->将此线程要执行的操作，声明在此方法体中。
③ 实例化一个当前Thread子类的对象，
④ 调用start方法（）1、启动线程
                  2、调用当前线程的run方法



1.2 例题：创建一个分线程1，用于遍历100以内的偶数
【拓展】 再创建一个分线程2，用于遍历100以内的偶数


2. 线程的创建方式二：
2.1 步骤：
① 创建一个实现Runnable接口的类
② 实现Runnable中的抽象方法 run方法
③ 创建一个当前Runnable实现类的对象
④ 将此对象作为参数传递到Thread类的构造器中，创建Thread的实例
⑤ 通过thread类的实例，调用start方法


2.2 例题：创建分线程遍历100以内的偶数


3. 对比两种方式？
   共同点： ①都是通过Thread类中start方法去创建线程
           ② 都是需要创建thread类或子类的对象去调用start()

   不同点：①一个是类的继承，一个是接口的实现
          ②建议：使用实现Runnable的接口的方式
          Runnable方式的好处：①实现的方式：避免了类的单继承的局限性
                            ② 更适合处理有共享数据的问题。
                            ③ 实现了代码和数据的分离

   联系：public class Thread implements Runnable
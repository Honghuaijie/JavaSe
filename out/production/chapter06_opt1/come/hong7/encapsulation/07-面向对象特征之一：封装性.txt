1.为什么需要封装性？
理论上：
    高内聚：类的内部数据操作细节自己完成，不允许外部干涉
    低耦合：仅暴露少量的方法给外部使用，尽量方便外部调用

通俗的说：把该隐藏的隐藏起来，该暴露的暴露出来，这就是封装性的设计思想。

2.如何实现数据封装？
2.1权限修饰符
    Java规定了四种权限修饰符，分别是：private、缺省、protected、public

2.2作用：
    我们可以使用4中权限修饰符来修饰类及类的内部成员、当这些成员被调用时，体现可见性的大小

2.4 4种权限具体使用
> 类：只能使用public、缺省修饰
> 类的内部成员：可以使用4种权限修饰符

2.5 开发中4中权限使用频率的情况
  比较高： public private
  比较低： 缺省、protected

3.封装性的体现
>场景1：私有化（private）类的属性，提供公共（public）的get、set方法，对此属性进行读取和修改
>场景2：将类中不需要对外暴露的方法进行private
>场景3：单例模式中构造器private了，避免在类的外部创建实例